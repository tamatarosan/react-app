{"version":3,"sources":["components/HeaderComponent.js","components/BTopMain.js","components/SearchPosts.js","components/BoardTop.js","components/Post.js","components/BoardWrapper.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","to","exact","Component","BTopMain","props","state","mystate","this","setState","updateState","console","log","JSON","stringify","list","data","map","title","date","detail","id","SearchPosts","type","name","BoardTop","e","preventDefault","onsortByAscend","target","value","innerText","bind","onClick","_SortByAscend","Post","now","Date","getMonth","time","getFullYear","slice","getDate","getHours","getMinutes","getSeconds","event","nowattr","onUpdate","length","history","push","ref","href","newPost","withRouter","BoardWrapper","key","line","sort","a","b","val","filter","item","toString","indexOf","toLowerCase","prevState","path","render","onSortByAscend","handleSortByAscend","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e4c7f6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass HeaderComponent extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"header-container\">\r\n        <NavLink to=\"/\" exact>\r\n          一覧\r\n        </NavLink>\r\n        <NavLink to=\"/Post\" exact>\r\n          投稿\r\n        </NavLink>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default HeaderComponent;\r\n","import React, { Component } from \"react\";\r\n\r\nclass BTopMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mystate: null };\r\n  }\r\n\r\n  updateState(state) {\r\n    this.setState(state);\r\n    this.props.updateState(state);\r\n    console.log(\"BoardTop\" + JSON.stringify(this.state));\r\n  }\r\n\r\n  render() {\r\n    const list = this.props.data.map((data) => {\r\n      return (\r\n        <li key={data.id}>\r\n          <div className=\"posts\">\r\n            <h4>{data.title}</h4>\r\n            <h5>{data.date}</h5>\r\n            <h6>{data.detail}</h6>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n    return <ul className=\"data-container\">{list}</ul>;\r\n  }\r\n}\r\nexport default BTopMain;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass SearchPosts extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" name=\"\" id=\"\" />\r\n        <Link to=\"/\" className=\"searchbutton\">\r\n          検索\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchPosts;\r\n","import React, { Component } from \"react\";\r\nimport HeaderComponent from \"./HeaderComponent\";\r\nimport BTopMain from \"./BTopMain\";\r\nimport SearchPosts from \"./SearchPosts\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass BoardTop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mystate: null };\r\n  }\r\n\r\n  updateState(state) {\r\n    this.setState(state);\r\n    this.props.updateState(state);\r\n  }\r\n\r\n  _sortByAscend(e) {\r\n    e.preventDefault();\r\n    // button要素に設定したvalue値を引数にセットし、handleSortByAscend()メソッドを実行\r\n    this.props.onsortByAscend(e.target.value);\r\n  }\r\n\r\n  sortruleset(e) {\r\n    console.log(e.target.innerText + \"dayo\");\r\n    this.setState({ mystate: e.target.innerText });\r\n    this.props.updateState(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <HeaderComponent />\r\n\r\n        <main className=\"top-main-container\">\r\n          <SearchPosts\r\n            data={this.props.data}\r\n            updateState={this.updateState.bind(this)}\r\n          />\r\n\r\n          <div>\r\n            <NavLink\r\n              to=\"/sortbytime\"\r\n              onClick={() => this._SortByAscend}\r\n              value=\"date\"\r\n            >\r\n              投稿時間\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/sortbytitle\"\r\n              onClick={() => this._SortByAscend}\r\n              value=\"title\"\r\n            >\r\n              タイトル\r\n            </NavLink>\r\n          </div>\r\n          <BTopMain\r\n            data={this.props.data}\r\n            updateState={this.updateState.bind(this)}\r\n            // onFilterVal={this.props.handleFilterVal.bind(this)}\r\n          />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BoardTop;\r\n","import React, { Component } from \"react\";\r\nimport HeaderComponent from \"./HeaderComponent\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Post extends Component {\r\n  nowattr() {\r\n    this.now = new Date();\r\n    console.log(this.now.getMonth());\r\n    this.time = `${this.now.getFullYear()}/${`${`0${\r\n      this.now.getMonth() + 1\r\n    }`.slice(-2)}`}/${`${`0${this.now.getDate()}`.slice(\r\n      -2\r\n    )}`} ${`${`0${this.now.getHours()}`.slice(\r\n      -2\r\n    )}:${`0${this.now.getMinutes()}`.slice(\r\n      -2\r\n    )}:${`0${this.now.getSeconds()}`.slice(-2)}`}`;\r\n    return this.time;\r\n  }\r\n\r\n  newPost(event) {\r\n    event.preventDefault();\r\n    if (this.title.value != \"\" && this.detail.value != \"\") {\r\n      this.nowattr();\r\n      this.props.onUpdate({\r\n        id: this.props.data.length,\r\n        title: this.title.value,\r\n        date: this.time,\r\n        detail: this.detail.value,\r\n      });\r\n      console.log(this.props.data);\r\n      this.props.history.push(\"/\");\r\n    } else {\r\n      this.props.history.push(\"/Post\");\r\n    }\r\n  }\r\n  render() {\r\n    // const data = this.props.data.filter(\r\n    //   (element) => element.id == this.props.match.params.id\r\n    // )[0];\r\n\r\n    return (\r\n      <div>\r\n        <HeaderComponent />\r\n        <main className=\"detail-main-container\">\r\n          <dl className=\"detail-main-list\">\r\n            <dt>タイトル</dt>\r\n            <dd>\r\n              <input\r\n                type=\"text\"\r\n                ref={(title) => {\r\n                  this.title = title;\r\n                }}\r\n              />\r\n            </dd>\r\n            <dt>詳細</dt>\r\n            <dd>\r\n              <textarea\r\n                ref={(detail) => {\r\n                  this.detail = detail;\r\n                }}\r\n              ></textarea>\r\n            </dd>\r\n          </dl>\r\n          <ul className=\"detail-command-container\">\r\n            <li>\r\n              <a href=\"#\" onClick={this.newPost.bind(this)}>\r\n                送信\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(Post);\r\n","import React, { Component } from \"react\";\r\nimport BoardTop from \"./BoardTop\";\r\nimport Post from \"./Post\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nclass BoardWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const data = [\r\n      { id: 0, title: \"declare\", date: \"2021/04/01 00:00\", detail: \"im taro\" },\r\n      { id: 1, title: \"タイトル3\", date: \"2021/02/02 00:00\", detail: \"詳細1\" },\r\n      { id: 2, title: \"タイトル2\", date: \"2021/03/03 00:00\", detail: \"詳細2\" },\r\n    ];\r\n    this.state = { data: data, mystate: null };\r\n    console.log(this.state);\r\n  }\r\n\r\n  handleSortByAscend(key) {\r\n    const line = this.state.data.sort((a, b) => {\r\n      if (a[key] < b[key]) return -1;\r\n      if (a[key] > b[key]) return 1;\r\n      return 0;\r\n    });\r\n    this.setState({\r\n      data: line,\r\n    });\r\n  }\r\n\r\n  sortbytime(list) {\r\n    list.sort((a, b) => {\r\n      if (a.date < b.date) {\r\n        return -1;\r\n      }\r\n      if (a.date > b.date) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  handleFilterVal(val) {\r\n    // JavaScriptのfilter()メソッドで絞り込み、絞り込んだ配列をline変数に格納\r\n    const line = this.props.data.filter(\r\n      (item) =>\r\n        // idまたはnameにキーワードが含まれていればtrueを返す\r\n        item.id.toString().indexOf(val) >= 0 ||\r\n        item.name.toLowerCase().indexOf(val) >= 0\r\n    );\r\n    // setStateを実行\r\n    this.setState({\r\n      data: line,\r\n    });\r\n  }\r\n\r\n  updateState(state) {\r\n    this.setState(state);\r\n  }\r\n\r\n  newPost(data) {\r\n    this.setState((prevState) => {\r\n      prevState.data[data.id] = data;\r\n\r\n      return { data: prevState.data };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // this.sortbytime(this.state.data);\r\n    console.log(\"oya\" + JSON.stringify(this.state));\r\n    // this.setState(this.data);\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route\r\n            path=\"/Post\"\r\n            render={() => (\r\n              <Post data={this.state.data} onUpdate={this.newPost.bind(this)} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/\"\r\n            render={() => (\r\n              <BoardTop\r\n                data={this.state.data}\r\n                updateState={this.updateState.bind(this)}\r\n                onSortByAscend={this.handleSortByAscend.bind(this)}\r\n                // onFilterVal={this.handleFilterVal.bind(this)}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nexport default BoardWrapper;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport BoardWrapper from \"./components/BoardWrapper\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<BoardWrapper />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}